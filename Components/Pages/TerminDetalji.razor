@page "/termin-detalji/{id:int}"
@using AttendanceChecker.Models
@using AttendanceChecker.Models.Entities
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IJSRuntime JS

@code {
	[Parameter] public int id { get; set; }
	private HttpClient? _httpClient;
	private Termin? termin;
	private List<Nazocnost>? studentAttendance;
	private List<Dvorana>? dvorane;
	private bool isLoading = true;
	private bool hasError = false;
	private int selectedDvoranaId { get; set; } = 1; // Default DvoranaId
	private bool isTerminActive;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_httpClient = ClientFactory.CreateClient("API");

			// Fetch students' attendance data for current termin
			studentAttendance = await _httpClient.GetFromJsonAsync<List<Nazocnost>>($"api/Attendance/termin/{id}");

			// Fetch termin
			termin = await _httpClient.GetFromJsonAsync<Termin>($"api/Termin/{id}");
			isTerminActive = DateTime.Now >= termin.StartTime && (!termin.EndTime.HasValue || DateTime.Now <= termin.EndTime);
		}
		catch (Exception ex)
		{
			hasError = true;
			Console.WriteLine($"Error fetching kolegij details or students: {ex.Message}");
		}
		finally
		{
			isLoading = false;
		}
	}

	private async Task EndTermin()
	{
		if (termin is null)
			return;

		try
		{
			string endpoint = $"api/Termin/{termin.TerminId}/end";

			// Make a PUT request to end the termin by updating the EndTime
			var response = await _httpClient.PutAsync(endpoint, null);

			if (response.IsSuccessStatusCode)
			{
				Console.WriteLine("Termin successfully ended.");
				// Reload the list of termini
				await OnInitializedAsync();
			}
			else
			{
				Console.WriteLine($"Error ending termin: {response.StatusCode}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Exception when ending termin: {ex.Message}");
		}
	}

	// Trigger the download of the Excel file
	private async Task ExportAttendance()
	{
		try
		{
			// Call the API to download the attendance Excel file
			var response = await _httpClient.GetAsync($"api/Attendance/termin/{id}/export");

			if (response.IsSuccessStatusCode)
			{
				// Get the file content as a byte array
				var fileContent = await response.Content.ReadAsByteArrayAsync();
				var fileName = "Pristnost_po_terminu.xlsx";

				// Log to check if file content is received
				Console.WriteLine("File content size: " + fileContent.Length);

				// Convert byte array to memory stream
				using var stream = new MemoryStream(fileContent);

				// Trigger the download of the file using JavaScript interop
				await DownloadFile(fileName, stream);
			}
			else
			{
				Console.WriteLine("Error exporting attendance: Response was not successful.");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error exporting attendance: {ex.Message}");
		}
	}

	private async Task DownloadFile(string fileName, Stream stream)
	{
		try
		{
			// Use a DotNetStreamReference for passing the stream to JavaScript
			var streamReference = new DotNetStreamReference(stream);

			// Invoke the JavaScript function to download the file
			await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamReference);
		}
		catch (JSException jsEx)
		{
			Console.WriteLine($"JavaScript Interop Error: {jsEx.Message}");
		}
	}

	// Navigate back to the main page
	private void GoBack()
	{
		Navigation.NavigateTo("/");
	}
}

<PageTitle>Detalji Kolegija</PageTitle>



@if (isLoading)
{
	<p>Loading...</p>
}
else if (hasError)
{
	<p>Error loading kolegij details or students.</p>
}
else if (termin is not null && studentAttendance is not null)
{
	<div>
		<button class="btn btn-outline-secondary" @onclick="GoBack">Povratak</button>
	</div>

	<div class="card-body">
		<div class="card-text-wrapper">
			<h5 class="card-title">@termin.TerminId | @termin.Dvorana.Naziv (@termin.Dvorana.Lokacija)</h5>
			@if (isTerminActive)
			{
				<span class="badge bg-success position-absolute top-0 end-0 m-2">U tijeku</span>
			}
			else
			{
				<span class="badge bg-danger position-absolute top-0 end-0 m-2">Završeno</span>
			}
			<p class="card-text">
				<strong>Početak:</strong> @termin.StartTime.ToString("dd.MM.yyyy HH:mm") <br />
				<strong>Završetak:</strong> @(termin.EndTime.HasValue ? termin.EndTime.Value.ToString("dd.MM.yyyy HH:mm") : "")<br />
			</p>
		</div>
	</div>

	<div class="action-row d-flex align-items-center">
		@if (isTerminActive)
		{
			<button class="btn btn-danger me-3" @onclick="() => EndTermin()">Završi aktivni termin</button>
		}
		<button class="btn btn-primary ms-auto" @onclick="ExportAttendance">
			<i class="bi bi-file-earmark-excel"></i> Izvoz prisutnosti po terminu
		</button>
	</div>

	<h4>Prisutnost studenata</h4>
		<div class="student-list">
		@foreach (var attendence in studentAttendance)
		{
					<div class="card">
						<div class="card-body">
					<img src="@(!string.IsNullOrEmpty(attendence.Student.Slika) ? attendence.Student.Slika : "placeholder-image.jpg")" alt="Student Photo" class="student-photo" />
							<div class="card-text-wrapper">
						<h5 class="card-title">@attendence.Student.Ime @attendence.Student.Prezime</h5>
								<p class="card-text">
							<strong>OIB:</strong> @attendence.Student.Oib <br />
								</p>
							</div>
						</div>
					</div>
		}
		</div>

}
else
{
	<p>No details available for this kolegij.</p>
}

<style>
	.kolegij-details {
		padding: 20px;
		background-color: #f8f9fa;
		margin-bottom: 20px;
		border-radius: 8px;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	}

	.student-list {
		display: flex;
		flex-direction: column;
		gap: 20px;
		padding: 20px;
	}

	.card {
		background-color: #fff;
		border-radius: 8px;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
		transition: transform 0.2s ease, box-shadow 0.2s ease;
		padding: 15px;
		display: flex;
		align-items: center;
		width: 100%; /* Make the card fill the full width */
		box-sizing: border-box;
	}


	.card-body {
		display: flex;
		align-items: center;
		width: 100%; /* Ensure the body takes full width */
		justify-content: space-between;
	}

	.student-photo {
		width: 100px;
		height: 100px;
		border-radius: 50%;
		margin-right: 20px;
		flex-shrink: 0; /* Ensure the photo doesn't shrink */
	}

	.card-text-wrapper {
		display: flex;
		flex-direction: row; /* Ensure name and other details are in one row */
		justify-content: space-between;
		align-items: center;
		flex-grow: 1;
	}

	.card-title {
		font-size: 20px;
		font-weight: bold;
		margin-right: 15px;
	}

	.card-text {
		font-size: 16px;
		color: #6c757d;
	}

	.action-row {
		display: flex;
		align-items: center;
		gap: 10px; /* Adjust spacing between elements */
		margin-bottom: 10px;
	}

	.dropdown-wrapper {
		min-width: 200px; /* Adjust the width of the dropdown */
	}

	.form-select {
		width: 100%; /* Ensure the select input takes full width inside the wrapper */
	}

</style>
